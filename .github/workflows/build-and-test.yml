name: CMake tests for various platforms

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ '*' ]

env:
  ASEA_DUMP_C: 1

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      # test linux x86-64 via ubuntu 22.04 with both gcc and clang
      # test linux aarch64 via ubuntu 24.04 as there are C++20 build issues on the 22.04 build image
      # test windows with MSVC
      # test macOS aarch64 with appleclang (macos-15 is an arm64 image)
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04-arm, windows-2025, macos-15]
        build_type: [Release]
        c_compiler: [gcc, clang]
        include:
          - os: windows-2025
            c_compiler: cl
            cpp_compiler: cl
            cmake_generator: "Visual Studio 17 2022"
          - os: windows-2025
            c_compiler: x86_64-w64-mingw32-gcc
            cpp_compiler: x86_64-w64-mingw32-g++
            cmake_generator: Ninja
          - os: ubuntu-22.04
            c_compiler: gcc
            cpp_compiler: g++
            cmake_generator: Ninja
          - os: ubuntu-22.04
            c_compiler: clang
            cpp_compiler: clang++
            cmake_generator: Ninja
          - os: ubuntu-24.04-arm
            c_compiler: clang
            cpp_compiler: clang++
            cmake_generator: Ninja
          - os: macos-15
            c_compiler: clang
            cpp_compiler: clang++
            cmake_generator: Ninja
        exclude: # FIXME: is what we want possible without this mess of exclusions??
          - os: windows-2025
            c_compiler: clang
          - os: windows-2025
            c_compiler: gcc
          # don't bother testing gcc twice and burning worker time, it's the same ABI and we don't expect issues
          - os: ubuntu-24.04-arm
            c_compiler: gcc
          - os: macos-15
            c_compiler: gcc

    steps:
    - uses: msys2/setup-msys2@v2
      if: runner.os == 'Windows' && matrix.c_compiler == 'x86_64-w64-mingw32-gcc'

    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -G${{ matrix.cmake_generator }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DASEA_ENABLE_TESTING=1
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --parallel 4

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --timeout 10 -j 4 --test-dir ${{ steps.strings.outputs.build-output-dir }}/tests --rerun-failed --output-on-failure --build-config ${{ matrix.build_type }}
      # FIXME: how do we exclude benchmarks when using ctest??